const UIBarButtonSystemItem = Object.freeze({
	add: 4
});

const UITableViewRowAnimation = Object.freeze({
	automatic: 100
});

const UITableViewCellStyle = Object.freeze({
	default: 0
});

$class MyViewController: UITableViewController {
	id _objects;
}

- (void)viewDidLoad {
	super.viewDidLoad();
	self.setTitle("Root View Controller");
	self.navigationItem().setLeftBarButtonItem(self.editButtonItem());
	const item = UIBarButtonItem.alloc().initWithBarButtonSystemItem(4, target: self, action: "addButtonTapped:");
	self.navigationItem().setRightBarButtonItem(item);
	_objects = NSMutableArray.array();
}

- (void)addButtonTapped:(id)sender {
	_objects.insertObject(new Date(), atIndex: 0);
	const path = NSIndexPath.indexPathForRow(0, inSection: 0);
	self.tableView().insertRowsAtIndexPaths([path], withRowAnimation: UITableViewRowAnimation.automatic);
}

// MARK:- Table View Data Source

- (long)tableView:(id)tableView numberOfRowsInSection:(long)section {
	return _objects.count();
}

- (id)tableView:(id)tableView cellForRowAtIndexPath:(id)indexPath {
	let cell = tableView.dequeueReusableCellWithIdentifier("cell");
	if (!cell) {
		cell = UITableViewCell.alloc().initWithStyle(UITableViewCellStyle.default, reuseIdentifier: "cell");
	}
	const date = _objects.objectAtIndex(indexPath.row());
	cell.textLabel().setText(date.description());
	return cell;
}

- (void)tableView:(id)tableView commitEditingStyle:(long)editingStyle forRowAtIndexPath:(id)indexPath {
	_objects.removeObjectAtIndex(indexPath.row());
	NSLog(box(unbox(box({"foo": 10, "bar": indexPath}))));
	tableView.deleteRowsAtIndexPaths([indexPath], withRowAnimation: UITableViewRowAnimation.automatic);
}

// MARK:- Table View Delegate

- (void)tableView:(id)tableView didSelectRowAtIndexPath:(id)indexPath {
	tableView.deselectRowAtIndexPath(indexPath, animated: true);
}

- (void)dealloc {
	NSLog("Bye!");
}

$end

$class BaseClass: NSObject

- (id)init {
	self = super.init();
	if (self) {
		NSLog("Base init called!");
	}
	return self;
}

- (void)dealloc {
	NSLog("Base dealloc!");
}

$end

$class AClass : BaseClass {
	id foo;
}

- (id)initWithMsg:(id)msg {
	self = super.init();
	if (self) {
		foo = "stored ivar";
		NSLog(msg);
	}
	return self;
}

- (void)dealloc {
	NSLog("AClass instance getting dealloc'd!");
}

- (BOOL)someFunc {
	NSLog(foo);
	return (1 + 1 == 2);
}

$end

HackObjC.someFuncWithBlock(defineBlock("i@?@", function (str) {
	NSLog("Block received message: " + str);
	return 10;
}));


loadFunc("free", "v^v");
loadFunc("malloc", "^vQ");
loadFunc("JXSizeForEncoding", "Q*");

var pointer = Pointer("@");
pointer.pointee = "Hello";
HackObjC.somePtrAcceptor(pointer);
free(pointer);
pointer = null;

var ptr2 = Pointer("i");
ptr2.pointee = 10;
HackObjC.somePtrSetter(ptr2);
NSLog("Ptr setter set: " + ptr2.pointee);
// free(ptr2);

var ptr3 = HackObjC.somePtrReturner();
NSLog("Ptr returner returned: " + ptr3.pointee);
var dist = ptr2.distanceTo(ptr3);
NSLog("Actual Dist: " + dist);
// NSLog("Dist+1: " + dist.decimalNumberByAdding(NSDecimalNumber.one()));
ptr2[ptr2.distanceTo(ptr3)] = 57;
NSLog("3rd with offset from 2nd: " + ptr2[ptr2.distanceTo(ptr3)]);
free(ptr3);
free(ptr2);
NSLog("Freed should be weird: " + ptr3.pointee);

idk = '{idk="foo"[2i]}';
var strct = HackObjC.someStructReturner();
strct.foo[0] = 123;
NSLog(Array.from(strct.foo));

let vc = AClass.alloc().initWithMsg("This is a message");
NSLog(vc.someFunc());
vc = null;

loadFunc("strcmp", "i**");
loadFunc("printf", "i*...");

CGRect = '{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}';
// CGSize = '{CGSize="width"d"height"d}';
// CGPoint = '{CGPoint="x"d"y"d}';

$class hook SuperchargerTests.AppDelegate

- (void)someNewFunction {
	NSLog("New function called!");
}

- (BOOL)application:(id)application didFinishLaunchingWithOptions:(id)launchOptions {
	const ret = $orig();
	try {
		NSLog(arr.objectAtIndex(2));
	} catch (e) {
		NSLog("JS EXCEPTION RAISED!");
		NSLog(e.message);
		NSLog("JS EXCEPTION END");
	}
	NSLog(resourcesPath);
	NSLog(strcmp("hello", "henlo"));
	printf("one plus one equals %u\ntwo plus two is (text): %s\n", "I", 1+1, "*", "four");

	const bounds = UIScreen.mainScreen().bounds();
	// TODO: Seems like `bounds.size.width = 1337` won't work since bounds.size returns a copy instead of the original rect
	// in the JXStruct objectGetProperty, force JXConvert to not memcpy, instead using the original struct's value
	// (structs should only be copied when being passed as method arguments)
	bounds.size.width = 1337;
	NSLog("Bounds: " + bounds);

	NSLog(box([UIColor.colorWithRed(1, green: 0.5, blue: 0, alpha: 0)]));

	self.someNewFunction();
	
	const window = UIWindow.alloc().initWithFrame(UIScreen.mainScreen().bounds());
	self.setWindow(window);
	let vc = MyViewController.new();
	const nav = UINavigationController.alloc().initWithRootViewController(vc);
	window.setRootViewController(nav);
	window.makeKeyAndVisible();
	return ret;
}

$end
