const UIBarButtonSystemItem = Object.freeze({
	add: 4
});

const UITableViewRowAnimation = Object.freeze({
	automatic: 100
});

const UITableViewCellStyle = Object.freeze({
	default: 0
});

@class MyViewController : UITableViewController {
	id _objects;
}

- (void)viewDidLoad {
	[super viewDidLoad];
	self.title = "Root View Controller";
	self.navigationItem.leftBarButtonItem = self.editButtonItem;
	const item = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:4 target:self action:"addButtonTapped:"];
	self.navigationItem.rightBarButtonItem = item;
	_objects = [NSMutableArray array];
}

- (void)addButtonTapped:(id)sender {
	[_objects insertObject:new Date() atIndex:0];
	const path = [NSIndexPath indexPathForRow:0 inSection:0];
	[self.tableView insertRowsAtIndexPaths:[path] withRowAnimation:UITableViewRowAnimation.automatic];
}

// MARK:- Table View Data Source

- (long)tableView:(id)tableView numberOfRowsInSection:(long)section {
	return _objects.count;
}

- (id)tableView:(id)tableView cellForRowAtIndexPath:(id)indexPath {
	let cell = [tableView dequeueReusableCellWithIdentifier:"cell"];
	if (!cell) {
		cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyle.default reuseIdentifier:"cell"];
	}
	const date = [_objects objectAtIndex:indexPath.row];
	cell.textLabel.text = [date description];
	return cell;
}

- (void)tableView:(id)tableView commitEditingStyle:(long)editingStyle forRowAtIndexPath:(id)indexPath {
	[_objects removeObjectAtIndex:indexPath.row];
	NSLog(@(unbox(@{"foo": 10, "bar": indexPath})));
	[tableView deleteRowsAtIndexPaths:[indexPath] withRowAnimation:UITableViewRowAnimation.automatic];
}

// MARK:- Table View Delegate

- (void)tableView:(id)tableView didSelectRowAtIndexPath:(id)indexPath {
	[tableView deselectRowAtIndexPath:indexPath animated:true];
}

- (void)dealloc {
	NSLog("Bye!");
}

@end

@class BaseClass: NSObject

- (id)init {
	self = [super init];
	if (self) {
		NSLog("Base init called!");
	}
	return self;
}

- (void)dealloc {
	NSLog("Base dealloc!");
}

@end

@class AClass : BaseClass {
	id foo;
}

- (id)initWithMsg:(id)msg {
	self = [super init];
	if (self) {
		foo = "stored ivar";
		NSLog(msg);
	}
	return self;
}

- (void)dealloc {
	NSLog("AClass instance getting dealloc'd!");
}

- (BOOL)someFunc {
	NSLog(foo);
	return (1 + 1 == 2);
}

@end

[HackObjC someFuncWithBlock:^int(id str) {
	NSLog("Block received message: " + str);
	return 10;
}];

@struct CGSize {
	double width;
	double height;
}

@struct CGPoint {
	double x;
	double y;
}

@struct CGRect {
	struct CGPoint origin;
	struct CGSize size;
}

@struct idk {
	int[2] foo;
}
// ^ should compile to "{idk=\"foo\"[2i]}"

@function void free(void *);
@function void *calloc(unsigned long, unsigned long);
@function int strcmp(char *, char *);
@function int printf(char *, ...);

var pointer = Pointer(@encode(id));
*pointer = "Hello";
[HackObjC somePtrAcceptor:pointer];
free(pointer);
pointer = null;

var ptr2 = Pointer(@encode(int));
*ptr2 = 10;
[HackObjC somePtrSetter:ptr2];
NSLog("Ptr setter set: " + *ptr2);
// free(ptr2);

var ptr3 = [HackObjC somePtrReturner];
NSLog("Ptr returner returned: " + *ptr3);
var dist = ptr2.distanceTo(ptr3);
NSLog("Actual Dist: " + dist);
// NSLog("Dist+1: " + dist.decimalNumberByAdding(NSDecimalNumber.one()));
ptr2[ptr2.distanceTo(ptr3)] = 57;
NSLog("3rd with offset from 2nd: " + ptr2[ptr2.distanceTo(ptr3)]);
free(ptr3);
free(ptr2);
NSLog("Freed should be weird: " + *ptr3);

var strct = [HackObjC someStructReturner];
strct.foo[0] = 123;
NSLog(Array.from(strct.foo));

let vc = [[AClass alloc] initWithMsg:"This is a message"];
NSLog([vc someFunc]);
vc = null;

%hook SuperchargerTests.AppDelegate

- (void)someNewFunction {
	NSLog("New function called!");
}

- (BOOL)application:(id)application didFinishLaunchingWithOptions:(id)launchOptions {
	const ret = %orig;
	try {
		NSLog([arr objectAtIndex:2]);
	} catch (e) {
		NSLog("JS EXCEPTION RAISED!");
		NSLog(e.message);
		NSLog("JS EXCEPTION END");
	}
	NSLog(resourcesPath);
	NSLog(strcmp("hello", "henlo"));
	printf("one plus one equals %u\ntwo plus two is (text): %s\n", @cast(unsigned int)(1+1), @cast(char *)("four"));

	// const boundsPtr = Pointer(@encode(struct CGRect), true);
	const boundsPtr = @cast(struct CGRect *)calloc(1, @sizeof(struct CGRect));
	(*boundsPtr).size.width = 1234;
	NSLog(*boundsPtr);

	NSLog(@[[UIColor colorWithRed:1 green:0.5 blue:0 alpha:0]]);

	[self someNewFunction];

	return ret;
}

%end

%hook SuperchargerTests.ViewController

- (void)sayHelloWithArg1:(id)arg1 arg2:(id)arg2 {
	NSLog("say hello called!");
	var origFunc = orig;
	var alert = [UIAlertController alertControllerWithTitle:"hello" message:"hi" preferredStyle:1];
	[alert addAction:[UIAlertAction actionWithTitle:"do something" style:1 handler:^(id int) {
		origFunc([arg1, arg2]);
		const window = [[UIWindow alloc] initWithFrame:UIScreen.mainScreen.bounds];
		UIApplication.sharedApplication.delegate.window = window;
		let vc = [MyViewController new];
		const nav = [[UINavigationController alloc] initWithRootViewController:vc];
		window.rootViewController = nav;
		[window makeKeyAndVisible];
	}]];
	[self presentViewController:alert animated:true completion:null];
}

%end

